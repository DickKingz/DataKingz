import React, { useState } from 'react';
import { ArrowLeft, Search, BookOpen, HelpCircle, Trophy, TrendingUp, Map, Coins, Crown, Swords, Zap, Filter, Sparkles, Star, Scroll, Brain } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

interface GuidePageProps {
  onBack: () => void;
}

interface DictionaryEntry {
  keyword: string;
  description: string;
}

interface FAQEntry {
  question: string;
  answer: string;
}

const GuidePage: React.FC<GuidePageProps> = ({ onBack }) => {
  const navigate = useNavigate();
  const [activeGuide, setActiveGuide] = useState<string>('gauntlet-knowledge');
  const [searchQuery, setSearchQuery] = useState('');

  // Dictionary data
  const dictionaryEntries: DictionaryEntry[] = [
    { keyword: 'Poison', description: 'Deals 1% of target\'s Max Health as Pure Damage per second' },
    { keyword: 'Wound', description: 'Damage Taken is increased 1% for every 5% missing Health' },
    { keyword: 'Frost', description: 'Reduces target\'s Attack Speed by 25%' },
    { keyword: 'Burn', description: 'Reduces healing received by 25%' },
    { keyword: 'Frozen', description: 'Cannot Move, Attack, use abilities, or gain energy' },
    { keyword: 'Stun', description: 'Stunned Units cannot Move, Attack, or cast abilities' },
    { keyword: 'Silence', description: 'Silenced Units cannot cast abilities' },
    { keyword: 'Disarm', description: 'Disarmed Units cannot Attack' },
    { keyword: 'Blind', description: 'Blinded Unit\'s Attacks miss.' },
    { keyword: 'Lethargic', description: 'Lethargic Units cannot gain Energy' },
    { keyword: 'Root', description: 'Rooted Units cannot Move' },
    { keyword: 'Clumsy', description: 'Clumsy Units cannot Dodge' },
    { keyword: 'Focused', description: 'Enemy Units change Attack target to the Focused Unit in range' },
    { keyword: 'Untargetable', description: 'Untargetable Units cannot be targeted directly by Enemies' },
    { keyword: 'Invulnerable', description: 'Invulnerable Units do not take Damage' },
    { keyword: 'Indomitable', description: 'Indomitable Units cannot die, their health cannot go lower than 1' },
    { keyword: 'Immune', description: 'Immune Units are not affected by negative effects' },
    { keyword: 'True Sight', description: 'True Sight causes Units\' Attacks to never miss' },
    { keyword: 'Fear/Flee', description: 'Fear/Flee causes Unit to run away from source' },
    { keyword: 'Charm', description: 'Charm causes Unit to move towards source' },
    { keyword: 'Taunt', description: 'Taunt forces Units to Attack the taunter' },
    { keyword: 'Shield', description: 'Shield absorbs Damage before Health whilst the Shield lasts' },
    { keyword: 'Cleanse', description: 'Cleanse removes all negative effects' },
    { keyword: 'Chain', description: 'Chain causes effects to propagate to additional Enemies' },
    { keyword: 'Omni Vamp', description: 'Heal for a % of all Damage dealt' },
    { keyword: 'Energy Vamp', description: 'Heal for a % of all Energy Damage dealt' },
    { keyword: 'Physical Vamp', description: 'Heal for a % of all Physical Damage dealt' },
    { keyword: 'Physical Pierce', description: 'Ignores a % of Physical Resistance' },
    { keyword: 'Energy Pierce', description: 'Ignores a % of Energy Resistance' },
    { keyword: 'Grit', description: 'Each Grit reduces incoming Physical Damage by 1' },
    { keyword: 'Resolve', description: 'Each Resolve reduces incoming Energy Damage by 1' },
    { keyword: 'Mitigation', description: 'Grit + Resolve => Reduces damage by a flat value' },
    { keyword: 'Resistances', description: 'Physical Resist + Energy Resist' },
    { keyword: 'Pure Damage', description: 'Pure Damage ignores resistances, deals exactly the mentioned damage. Can Crit.' },
    { keyword: 'Physical Damage', description: 'Physical Damage deals Damage to Health and Shield, is reduced by Physical Resistance and mitigated by Grit' },
    { keyword: 'Energy Damage', description: 'Energy Damage deals Damage to Health and Shield, is reduced by Energy Resistance and mitigated by Resolve' },
    { keyword: 'Energy', description: 'Used to cast Omega Abilities' },
    { keyword: 'Omega Power', description: 'Increases the power of Omega Abilities' },
    { keyword: 'Attack Speed', description: 'Increases the frequency of Attacks' },
    { keyword: 'Crit Chance', description: 'Increases the chance of a Critical Hit' },
    { keyword: 'Crit Amp', description: 'Increases the Damage of Critical Hits' },
    { keyword: 'Attack Range', description: 'The max range at which Units can Attack without needing to move closer' },
    { keyword: 'Health Regen', description: 'Amount of Health regenerated per second' },
    { keyword: 'Energy Regen', description: 'Amount of Energy regenerated per second' },
    { keyword: 'Hyper', description: 'Generated by countering the Dominant Affinity of Enemies' },
    { keyword: 'Hyperactive', description: 'Caused by gaining Full Hyper, grants bonuses dependant on the Unit\'s Dominant Class' },
    { keyword: 'Omega', description: 'A special Ability cast when a Unit reaches Max Energy' },
    { keyword: 'Heal', description: 'Recover Health' },
    { keyword: 'Energy Cost', description: 'The Energy required to cast an Omega' },
    { keyword: 'Thorns', description: 'Deals Pure Damage to any Unit that Attacks the target with Thorns' },
    { keyword: 'Steal', description: 'Take from Enemy Unit and gain' },
    { keyword: 'Ally', description: 'Units on the same Team, excluding Self' },
    { keyword: 'Teammate', description: 'Units on the same Team, including Self' },
    { keyword: 'Exploit Weakness', description: 'Causes a Hit to deal additional Damage based on the recipient\'s missing Health' },
    { keyword: 'Energy Resistance', description: 'Reduces incoming Energy Damage' },
    { keyword: 'Physical Resistance', description: 'Reduces incoming Physical Damage' },
    { keyword: 'Dodge', description: 'Chance to avoid an incoming Attack' },
    { keyword: 'Health', description: 'The unit\'s health points. When it reaches 0, the unit dies' },
    { keyword: 'Shatter', description: 'Reduces target\'s Physical Resistance by 25%' },
    { keyword: 'Corrode', description: 'Reduces target\'s Energy Resistance by 25%' }
  ];

  // FAQ data
  const faqEntries: FAQEntry[] = [
    {
      question: 'What does "X" term mean?',
      answer: 'Most probably you can find it in the Dictionary sheet! Go to "Dictionary" sheet and use ctrl+f to search for the term in question. If it is not there, leave a comment to this cell and we\'ll add it there right away!'
    },
    {
      question: 'What is Hyper?',
      answer: 'The Hyper system is an affinity-based mechanic where illuvials build up their "Hyper Meter" as they battle units that they affinity-counter (Water vs Fire, for example). As the Hyper Meter fills, the units becomes more powerful. On full Hyper Meter, the unit receives a significant power boost. Check the "Hyper" sheet for more info on this!'
    },
    {
      question: 'What is the "T0/Lynx Spawns Panel" showing?',
      answer: 'It shows the available T0 units for that match, as well as what the Lynx becomes on S3. In total, there are 25 different T0 units, but only 12 of them are available each match, at random. The panel shows you which units you will be able to see in the shop in the on-going match. Lynx can also become only one variation, chosen at random on match start and shown in the panel for visibility.'
    },
    {
      question: 'Why does the Tier 2 have such low odds compared to other tiers?',
      answer: 'That is because Tier 2 has only one unit - the Lynx, compared to the other tiers that have 5+ units. Giving Tier 2 higher odds would mean that it would be way too easy to get it to Stage 3. Even in its current state, it is moderately easy to get the Lynx to Stage 3. Furthermore, to counter the low odds, the Lynx can be found through a wide range of levels, having at least 5% chance from level 2 up to 7. Even on level 8, it still has a solid 3% chance (it might seem low, but in the Lynx case it really isn\'t).'
    },
    {
      question: 'Why are there different T0 units and Lynxes every match?',
      answer: 'There are multiple reasons for this. Firstly, both T0s and Lynxes are unique in the fact that there are a lot of variations of them - too many to fit them into the Gauntlet Format. Secondly, having different variations of them adds diversity from match to match, as this opens up new comp possibilities. Finally, it\'s a tool for people to express their skill by adapting each game depending on what T0 and Lynx units are available.'
    },
    {
      question: 'How can I see "Damage Dealt" information?',
      answer: 'On top of the "Synergies" Panel, you can see 3 buttons. The one in the middle sends you to "Combat Stats" - there you can see Damage Dealt, but you can also further browse through with the buttons below to reach the "Damage Received" and "Shield & Healing" panels. The one on the right sends you to "Hyper" panel, that shows you an overview of the units\' Hyper Bars. The one on the left sends you back to "Synergies" panel.'
    },
    {
      question: 'What is different on "Leviathan" mode?',
      answer: 'On Leviathan mode you get to play with the units that you own! That means that if you own, let\'s say, a level 45 Phosphorus, you\'ll get it to replace the usual Level 1 Phosphorus with the Level 45 one. The replacement happens automatically, the owned units appear in the shop instead of the default Level 1 ones. In short: On Leviathan mode players get to showcase their owned Illuvials.'
    },
    {
      question: 'Why does Lynx have no affinity/class on S1 and no affinity on S2?',
      answer: 'Because he\'s special like that! - Lynx is the only unit of Tier 2. - Lynx can become any class or affinity (random each match) - Lynx starts with no affinity or class - Lynx unlocks its class on Stage 2 - Lynx unlocks its affinity on Stage 3'
    }
  ];

  const guideItems = [
    { 
      id: 'gauntlet-knowledge', 
      name: 'Gauntlet Knowledge', 
      icon: <Trophy className="w-5 h-5" />, 
      description: 'Tournament rules & rewards',
      gradient: 'from-yellow-500 to-orange-500'
    },
    { 
      id: 'dictionary', 
      name: 'Dictionary', 
      icon: <BookOpen className="w-5 h-5" />, 
      description: 'Terms & terminology',
      gradient: 'from-blue-500 to-cyan-500'
    },
    { 
      id: 'faq', 
      name: 'FAQ', 
      icon: <HelpCircle className="w-5 h-5" />, 
      description: 'Frequently asked questions',
      gradient: 'from-green-500 to-emerald-500'
    },
    { 
      id: 'game-progression', 
      name: 'Game Progression', 
      icon: <TrendingUp className="w-5 h-5" />, 
      description: 'Level & economy strategy',
      gradient: 'from-purple-500 to-pink-500'
    },
    { 
      id: 'shop-values', 
      name: 'Shop Values', 
      icon: <Coins className="w-5 h-5" />, 
      description: 'Pricing & probabilities',
      gradient: 'from-amber-500 to-yellow-500'
    },
    { 
      id: 'hyper', 
      name: 'Hyper', 
      icon: <Zap className="w-5 h-5" />, 
      description: 'Hyper system mechanics',
      gradient: 'from-violet-500 to-purple-500'
    },
    { 
      id: 'regions', 
      name: 'Regions', 
      icon: <Map className="w-5 h-5" />, 
      description: 'Regional differences',
      gradient: 'from-teal-500 to-cyan-500'
    },
    { 
      id: 'match-flow', 
      name: 'Match Flow', 
      icon: <Crown className="w-5 h-5" />, 
      description: 'Round progression',
      gradient: 'from-rose-500 to-pink-500'
    },
    { 
      id: 'pve-rounds', 
      name: 'PVE Rounds', 
      icon: <Swords className="w-5 h-5" />, 
      description: 'Neutral round strategies',
      gradient: 'from-red-500 to-orange-500'
    }
  ];

  const filteredDictionary = dictionaryEntries.filter(entry =>
    entry.keyword.toLowerCase().includes(searchQuery.toLowerCase()) ||
    entry.description.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const filteredFAQ = faqEntries.filter(entry =>
    entry.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
    entry.answer.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleBack = () => {
    navigate('/app');
  };

  const renderContent = () => {
    switch (activeGuide) {
      case 'dictionary':
        return (
          <div className="space-y-6">
            <div className="flex items-center gap-4 mb-6">
              <div className="relative flex-1 max-w-md">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search for a keyword..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full bg-gray-800 text-white pl-12 pr-6 py-3 rounded-xl border border-gray-700 focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
              </div>
            </div>

            <div className="grid gap-4">
              {filteredDictionary.map((entry, idx) => (
                <div key={idx} className="bg-gray-800 rounded-xl p-6 border border-gray-700 hover:border-purple-500 transition-all duration-300">
                  <div className="flex items-start gap-4">
                    <div className="bg-purple-600 text-white px-3 py-1 rounded-lg font-bold text-sm min-w-fit">
                      {entry.keyword}
                    </div>
                    <div className="text-gray-300 leading-relaxed">{entry.description}</div>
                  </div>
                </div>
              ))}
            </div>

            {filteredDictionary.length === 0 && (
              <div className="text-center py-12">
                <div className="text-gray-400 text-lg mb-2">No terms found</div>
                <div className="text-gray-500 text-sm">Try a different search term</div>
              </div>
            )}
          </div>
        );

      case 'faq':
        return (
          <div className="space-y-6">
            <div className="flex items-center gap-4 mb-6">
              <div className="relative flex-1 max-w-md">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search FAQ..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full bg-gray-800 text-white pl-12 pr-6 py-3 rounded-xl border border-gray-700 focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
              </div>
            </div>

            <div className="space-y-6">
              {filteredFAQ.map((entry, idx) => (
                <div key={idx} className="bg-gray-800 rounded-xl p-6 border border-gray-700 hover:border-purple-500 transition-all duration-300">
                  <h3 className="text-white font-semibold text-lg mb-4 flex items-start gap-3">
                    <HelpCircle className="w-5 h-5 text-purple-400 mt-0.5 flex-shrink-0" />
                    {entry.question}
                  </h3>
                  <div className="text-gray-300 leading-relaxed pl-8">
                    {entry.answer}
                  </div>
                </div>
              ))}
            </div>

            {filteredFAQ.length === 0 && (
              <div className="text-center py-12">
                <div className="text-gray-400 text-lg mb-2">No FAQ found</div>
                <div className="text-gray-500 text-sm">Try a different search term</div>
              </div>
            )}
          </div>
        );

      case 'game-progression':
        return (
          <div className="space-y-8">
            {/* Leveling */}
            <div className="bg-gray-800 rounded-xl p-6 border border-gray-700">
              <h3 className="text-white text-xl font-bold mb-6 flex items-center gap-3">
                <TrendingUp className="w-6 h-6 text-purple-400" />
                Leveling
              </h3>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-gray-700">
                      <th className="text-left text-purple-400 font-semibold py-3">Level</th>
                      <th className="text-left text-purple-400 font-semibold py-3">XP Required</th>
                    </tr>
                  </thead>
                  <tbody>
                    {[
                      { level: 1, xp: 2 },
                      { level: 2, xp: 2 },
                      { level: 3, xp: 6 },
                      { level: 4, xp: 10 },
                      { level: 5, xp: 20 },
                      { level: 6, xp: 30 },
                      { level: 7, xp: 40 },
                      { level: 8, xp: 60 },
                      { level: 9, xp: 80 },
                      { level: 10, xp: 'Max Level' }
                    ].map((row, idx) => (
                      <tr key={idx} className="border-b border-gray-700/50">
                        <td className="text-white py-3">{row.level}</td>
                        <td className="text-gray-300 py-3">{row.xp}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            {/* PVE Damage */}
            <div className="bg-gray-800 rounded-xl p-6 border border-gray-700">
              <h3 className="text-white text-xl font-bold mb-4">🛡️ PVE Damage</h3>
              <div className="bg-gray-900 rounded-lg p-4 mb-4">
                <div className="text-purple-400 font-semibold mb-2">Formula:</div>
                <div className="text-white font-mono">2 × (number of units alive)</div>
              </div>
              <p className="text-gray-300">
                For each PVE round, the damage a player takes is 2 times the number of enemy units alive at the end of the round.
              </p>
            </div>

            {/* PVP Damage */}
            <div className="bg-gray-800 rounded-xl p-6 border border-gray-700">
              <h3 className="text-white text-xl font-bold mb-6">⚔️ PVP Damage</h3>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-gray-700">
                      <th className="text-left text-purple-400 font-semibold py-3">Rounds</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Main Formula</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Modifier</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Example</th>
                    </tr>
                  </thead>
                  <tbody>
                    {[
                      { rounds: '3-6', formula: 'Winning Player Level + Surviving Illuvials', modifier: '-2', example: '5+3-2=6' },
                      { rounds: '8-11', formula: 'Winning Player Level + Surviving Illuvials', modifier: '-2', example: '5+3-2=6' },
                      { rounds: '13-16', formula: 'Winning Player Level + Surviving Illuvials', modifier: '0', example: '5+3+0=8' },
                      { rounds: '18-21', formula: 'Winning Player Level + Surviving Illuvials', modifier: '+3', example: '5+3+3=11' },
                      { rounds: '23-26', formula: 'Winning Player Level + Surviving Illuvials', modifier: '+6', example: '5+3+6=14' },
                      { rounds: '28-31', formula: 'Winning Player Level + Surviving Illuvials', modifier: '+10', example: '5+3+10=18' },
                      { rounds: '33-34', formula: 'Winning Player Level + Surviving Illuvials', modifier: '+20', example: '5+3+20=28' },
                      { rounds: '35-36', formula: 'Winning Player Level + Surviving Illuvials', modifier: '+50', example: '5+3+50=58' },
                      { rounds: '38+', formula: 'Winning Player Level + Surviving Illuvials', modifier: '+100', example: '5+3+100=108' }
                    ].map((row, idx) => (
                      <tr key={idx} className="border-b border-gray-700/50">
                        <td className="text-white py-3">{row.rounds}</td>
                        <td className="text-gray-300 py-3 text-sm">{row.formula}</td>
                        <td className="text-gray-300 py-3">{row.modifier}</td>
                        <td className="text-purple-400 py-3 font-mono">{row.example}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              <p className="text-gray-400 text-sm mt-4">
                The formula changes as the game progresses. The modifier increases in later rounds, making each win more impactful.
              </p>
            </div>
          </div>
        );

      case 'shop-values':
        return (
          <div className="space-y-8">
            {/* Illuvial Shop Weights */}
            <div className="bg-gray-800 rounded-xl p-6 border border-gray-700">
              <h3 className="text-white text-xl font-bold mb-6">Illuvial Shop Weights at Each Level</h3>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-gray-700">
                      <th className="text-left text-purple-400 font-semibold py-3">Level</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Tier 0</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Tier 1</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Tier 2</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Tier 3</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Tier 4</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Tier 5</th>
                    </tr>
                  </thead>
                  <tbody>
                    {[
                      { level: 1, t0: '100%', t1: '0%', t2: '0%', t3: '0%', t4: '0%', t5: '0%' },
                      { level: 2, t0: '70%', t1: '25%', t2: '5%', t3: '0%', t4: '0%', t5: '0%' },
                      { level: 3, t0: '60%', t1: '30%', t2: '6%', t3: '4%', t4: '0%', t5: '0%' },
                      { level: 4, t0: '45%', t1: '40%', t2: '8%', t3: '5%', t4: '2%', t5: '0%' },
                      { level: 5, t0: '25%', t1: '50%', t2: '10%', t3: '10%', t4: '4%', t5: '1%' },
                      { level: 6, t0: '10%', t1: '40%', t2: '8%', t3: '25%', t4: '12%', t5: '5%' },
                      { level: 7, t0: '0%', t1: '25%', t2: '5%', t3: '34%', t4: '24%', t5: '12%' },
                      { level: 8, t0: '0%', t1: '10%', t2: '3%', t3: '34%', t4: '35%', t5: '18%' },
                      { level: 9, t0: '0%', t1: '10%', t2: '1%', t3: '24%', t4: '35%', t5: '30%' },
                      { level: 10, t0: '0%', t1: '10%', t2: '1%', t3: '15%', t4: '34%', t5: '40%' }
                    ].map((row, idx) => (
                      <tr key={idx} className="border-b border-gray-700/50">
                        <td className="text-white py-3 font-semibold">{row.level}</td>
                        <td className="text-gray-300 py-3">{row.t0}</td>
                        <td className="text-gray-300 py-3">{row.t1}</td>
                        <td className="text-gray-300 py-3">{row.t2}</td>
                        <td className="text-gray-300 py-3">{row.t3}</td>
                        <td className="text-gray-300 py-3">{row.t4}</td>
                        <td className="text-gray-300 py-3">{row.t5}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        );

      case 'hyper':
        return (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-xl p-6 border border-gray-700">
              <h3 className="text-white text-xl font-bold mb-6 flex items-center gap-3">
                <Zap className="w-6 h-6 text-purple-400" />
                What is Hyper?
              </h3>
              <div className="space-y-4 text-gray-300 leading-relaxed">
                <p>
                  The Hyper system is an affinity-based mechanic where illuvials build up their "Hyper Meter" as they battle units that they affinity-counter (e.g., Water vs Fire). As the Hyper Meter fills, the unit becomes more powerful. On full Hyper Meter, the unit receives a significant power boost.
                </p>
                <p>
                  Check the FAQ and Dictionary for more info on Hyper and related mechanics.
                </p>
              </div>
            </div>
          </div>
        );

      case 'regions':
        return (
          <div className="space-y-6">
            {[
              { name: 'No Region', modifier: 'No Modifier', description: 'Everyone is searching for Leviathan. No Region effect this game.' },
              { name: 'Sanctum Mesa', modifier: 'Skip the Tutorial', description: 'All players start at Level 5.' },
              { name: 'Abyssal Basin', modifier: 'Imprint Alchemy', description: 'Players start with 3 random Base Imprints.' },
              { name: 'Brighland Steppes', modifier: 'Bulk-Up', description: 'Start with an additional 30 Drone Health.' },
              { name: 'Crimson Waste', modifier: 'Punishing Blows', description: 'Players are dealt an additional 2 Damage if they lose a PvP Round.' },
              { name: 'Taiga Boreal', modifier: 'Teeming Bayou', description: 'Drone Augments can be rerolled an additional time.' },
              { name: 'Halcyon Sea', modifier: 'Wave Rider', description: 'Credits from Win/Loss Streaks are tripled.' },
              { name: 'Crystal Shores', modifier: 'A Different Approach', description: 'Tier 0 Illuvials cost 1 Credit this match.' },
              { name: 'Shardbluff', modifier: 'Legendary Start', description: 'Players start with a Legendary Augment Crate.' }
            ].map((region, idx) => (
              <div key={idx} className="bg-gray-800 rounded-xl p-6 border border-gray-700 hover:border-purple-500 transition-all duration-300">
                <div className="flex items-start gap-4">
                  <div className="bg-purple-600 text-white px-3 py-1 rounded-lg font-bold text-sm min-w-fit">
                    {region.name}
                  </div>
                  <div>
                    <div className="text-white font-semibold mb-2">{region.modifier}</div>
                    <div className="text-gray-300">{region.description}</div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        );

      case 'match-flow':
        return (
          <div className="bg-gray-800 rounded-xl p-6 border border-gray-700">
            <h3 className="text-white text-xl font-bold mb-6">Match Flow</h3>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b border-gray-700">
                    <th className="text-left text-purple-400 font-semibold py-3">Round</th>
                    <th className="text-left text-purple-400 font-semibold py-3">PVP / PVE</th>
                    <th className="text-left text-purple-400 font-semibold py-3">Event</th>
                    <th className="text-left text-purple-400 font-semibold py-3">Placement Phase Time (s)</th>
                  </tr>
                </thead>
                <tbody>
                  {[
                    { round: 1, type: 'PVE', event: '', time: 15 },
                    { round: 2, type: 'PVE', event: '', time: 20 },
                    { round: 3, type: 'PVP', event: '', time: 30 },
                    { round: 4, type: 'PVP', event: 'Base Weapon', time: 40 },
                    { round: 5, type: 'PVP', event: 'Drone Augment', time: 45 },
                    { round: 6, type: 'PVP', event: '', time: 40 },
                    { round: 7, type: 'PVE', event: '', time: 20 },
                    { round: 8, type: 'PVP', event: 'Draft Deck', time: 35 },
                    { round: 9, type: 'PVP', event: '', time: 40 },
                    { round: 10, type: 'PVP', event: '', time: 40 },
                    { round: 11, type: 'PVP', event: 'Weapon Amplifier', time: 50 },
                    { round: 12, type: 'PVE', event: 'Drone Augment', time: 40 },
                    { round: 13, type: 'PVP', event: '', time: 40 },
                    { round: 14, type: 'PVP', event: 'Suit Amplifier', time: 40 },
                    { round: 15, type: 'PVP', event: 'Draft Deck', time: 35 },
                    { round: 16, type: 'PVP', event: '', time: 40 },
                    { round: 17, type: 'PVE', event: '', time: 20 },
                    { round: 18, type: 'PVP', event: 'Weapon Amplifier', time: 50 },
                    { round: 19, type: 'PVP', event: 'Drone Augment', time: 40 },
                    { round: 20, type: 'PVP', event: '', time: 40 },
                    { round: 21, type: 'PVP', event: '', time: 40 },
                    { round: 22, type: 'PVE', event: 'Draft Deck', time: 45 },
                    { round: 23, type: 'PVP', event: '', time: 40 },
                    { round: 24, type: 'PVP', event: '', time: 40 },
                    { round: 25, type: 'PVP', event: '', time: 40 },
                    { round: 26, type: 'PVP', event: '', time: 40 },
                    { round: 27, type: 'PVE', event: '', time: 50 },
                    { round: 28, type: 'PVP', event: '', time: 40 },
                    { round: 29, type: 'PVP', event: 'Draft Deck', time: 45 },
                    { round: 30, type: 'PVP', event: '', time: 40 },
                    { round: 31, type: 'PVP', event: '', time: 40 },
                    { round: 32, type: 'PVE', event: '', time: 50 },
                    { round: 33, type: 'PVP', event: '', time: 40 },
                    { round: '34+', type: 'PVP', event: '', time: 40 }
                  ].map((row, idx) => (
                    <tr key={idx} className="border-b border-gray-700/50">
                      <td className="text-white py-3">{row.round}</td>
                      <td className={`py-3 font-semibold ${row.type === 'PVP' ? 'text-red-400' : 'text-green-400'}`}>
                        {row.type}
                      </td>
                      <td className="text-gray-300 py-3">{row.event}</td>
                      <td className="text-gray-300 py-3">{row.time}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        );

      case 'pve-rounds':
        return (
          <div className="space-y-8">
            {/* Rewards for Eliminating */}
            <div className="bg-gray-800 rounded-xl p-6 border border-gray-700">
              <h3 className="text-white text-xl font-bold mb-6">Rewards for Eliminating a PVE Illuvial</h3>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-gray-700">
                      <th className="text-left text-purple-400 font-semibold py-3">Tier 0</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Tier 1</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Tier 2</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Tier 3</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Tier 4</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Tier 5</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr className="border-b border-gray-700/50">
                      <td className="text-white py-3">1</td>
                      <td className="text-white py-3">2</td>
                      <td className="text-white py-3">3</td>
                      <td className="text-white py-3">4</td>
                      <td className="text-white py-3">5</td>
                      <td className="text-white py-3">6</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>

            {/* PVE Rounds Details */}
            <div className="bg-gray-800 rounded-xl p-6 border border-gray-700">
              <h3 className="text-white text-xl font-bold mb-6">PVE Rounds</h3>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-gray-700">
                      <th className="text-left text-purple-400 font-semibold py-3">Round</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Enemies</th>
                      <th className="text-left text-purple-400 font-semibold py-3">Credit Rewards</th>
                    </tr>
                  </thead>
                  <tbody>
                    {[
                      { round: 1, enemies: 'Lesser Water Fliish', credits: '1 Credits' },
                      { round: 2, enemies: 'Lesser Nature Fliish, Lesser Fire Fliish', credits: '2 Credits' },
                      { round: 7, enemies: 'Greater Earth Doka, Greater Fire Doka, Greater Nature Doka', credits: '3 Credits' },
                      { round: 12, enemies: 'Scarabok, Krunk, Twine', credits: '14 Credits' },
                      { round: 17, enemies: 'Stabbin, Chukoorl, Rake, Loulura', credits: '15 Credits' },
                      { round: 22, enemies: 'Ryplance, Jokull, Phorus, Rai-lu, Greater Monkier', credits: '19 Credits' },
                      { round: 27, enemies: 'Vermilliare, Kukkaraph, Ghazotep, Archeleon, Adoredo, Fernite, Geyyser', credits: '28 Credits' },
                      { round: 32, enemies: 'Titanor, Gnarl, Cardulox, Archeleon, Seeforus, Dualeph, Ophisto', credits: '28 Credits' },
                      { round: 37, enemies: 'An army', credits: 'The whole bank' }
                    ].map((row, idx) => (
                      <tr key={idx} className="border-b border-gray-700/50">
                        <td className="text-white py-3 font-semibold">{row.round}</td>
                        <td className="text-gray-300 py-3">{row.enemies}</td>
                        <td className="text-green-400 py-3 font-semibold">{row.credits}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        );

      default:
        return (
          <div className="text-center py-12">
            <div className="text-gray-400 text-lg mb-2">Select a guide from the sidebar</div>
            <div className="text-gray-500 text-sm">Choose a topic to view detailed information</div>
          </div>
        );
    }
  };

  return (
    <div className="min-h-screen bg-gray-950">
      {/* Custom Guides Header */}
      <div className="relative overflow-hidden">
        {/* Animated Background */}
        <div className="absolute inset-0 bg-gradient-to-br from-indigo-900/30 via-purple-900/20 to-blue-900/30">
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_20%_50%,rgba(99,102,241,0.2),transparent_50%)] animate-pulse" />
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_80%_20%,rgba(147,51,234,0.2),transparent_50%)] animate-pulse" style={{ animationDelay: '1s' }} />
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_40%_80%,rgba(59,130,246,0.2),transparent_50%)] animate-pulse" style={{ animationDelay: '2s' }} />
          
          {/* Floating Knowledge Icons */}
          {Array.from({ length: 25 }).map((_, i) => (
            <div
              key={i}
              className="absolute opacity-20 animate-float"
              style={{
                left: `${Math.random() * 100}%`,
                top: `${Math.random() * 100}%`,
                animationDelay: `${Math.random() * 3}s`,
                animationDuration: `${3 + Math.random() * 2}s`
              }}
            >
              {i % 4 === 0 ? (
                <BookOpen className="w-3 h-3 text-indigo-400/30" />
              ) : i % 4 === 1 ? (
                <Scroll className="w-3 h-3 text-purple-400/30" />
              ) : i % 4 === 2 ? (
                <Brain className="w-3 h-3 text-blue-400/30" />
              ) : (
                <Star className="w-3 h-3 text-cyan-400/30" />
              )}
            </div>
          ))}
        </div>

        {/* Glass morphism overlay */}
        <div className="relative backdrop-blur-xl bg-gray-900/80 border-b border-gray-700/50">
          <div className="px-8 py-8">
            {/* Back Button */}
            <div className="mb-6">
              <button
                onClick={handleBack}
                className="flex items-center gap-3 text-gray-400 hover:text-white transition-all duration-300 bg-gray-800/50 hover:bg-gray-700/50 px-4 py-2 rounded-xl border border-gray-700/50 backdrop-blur-sm"
              >
                <ArrowLeft className="w-5 h-5" />
                Back to Main
              </button>
            </div>

            {/* Main Header */}
            <div className="flex items-center justify-between mb-8">
              <div className="flex items-center gap-6">
                <div className="relative group">
                  <div className="w-20 h-20 bg-gradient-to-br from-indigo-500 via-purple-500 to-blue-500 rounded-2xl flex items-center justify-center shadow-2xl shadow-indigo-500/25 group-hover:shadow-indigo-500/40 transition-all duration-300 group-hover:scale-105">
                    <BookOpen className="w-10 h-10 text-white" />
                  </div>
                  <div className="absolute inset-0 bg-gradient-to-br from-indigo-500 via-purple-500 to-blue-500 rounded-2xl blur-xl opacity-30 group-hover:opacity-50 transition-opacity duration-300" />
                  <Sparkles className="w-6 h-6 text-yellow-400 absolute -top-2 -right-2 animate-pulse" />
                </div>
                <div>
                  <h1 className="text-5xl font-black mb-2">
                    <span className="bg-gradient-to-r from-white via-indigo-200 to-purple-200 bg-clip-text text-transparent">
                      GUIDES
                    </span>
                  </h1>
                  <p className="text-xl text-gray-400 mb-2">Master the game with comprehensive guides</p>
                  <div className="flex items-center gap-3">
                    <div className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-4 py-1 rounded-full font-bold text-sm">
                      KNOWLEDGE BASE
                    </div>
                    <div className="flex gap-1">
                      <div className="w-2 h-2 bg-indigo-400 rounded-full animate-pulse" />
                      <div className="w-2 h-2 bg-purple-400 rounded-full animate-pulse" style={{ animationDelay: '0.5s' }} />
                      <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse" style={{ animationDelay: '1s' }} />
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Guide Categories Preview */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-gray-800/50 backdrop-blur-xl rounded-xl p-6 border border-gray-700/50 hover:border-indigo-500/30 transition-all duration-300 group">
                <div className="flex items-center gap-3 mb-2">
                  <BookOpen className="w-6 h-6 text-indigo-400 group-hover:scale-110 transition-transform duration-200" />
                  <span className="text-gray-300 font-medium">Game Mechanics</span>
                </div>
                <span className="text-white text-3xl font-bold">6</span>
                <div className="text-indigo-400 text-sm mt-1">Core Systems</div>
              </div>

              <div className="bg-gray-800/50 backdrop-blur-xl rounded-xl p-6 border border-gray-700/50 hover:border-purple-500/30 transition-all duration-300 group">
                <div className="flex items-center gap-3 mb-2">
                  <HelpCircle className="w-6 h-6 text-purple-400 group-hover:scale-110 transition-transform duration-200" />
                  <span className="text-gray-300 font-medium">FAQ & Dictionary</span>
                </div>
                <span className="text-white text-3xl font-bold">2</span>
                <div className="text-purple-400 text-sm mt-1">Quick Reference</div>
              </div>

              <div className="bg-gray-800/50 backdrop-blur-xl rounded-xl p-6 border border-gray-700/50 hover:border-blue-500/30 transition-all duration-300 group">
                <div className="flex items-center gap-3 mb-2">
                  <Trophy className="w-6 h-6 text-blue-400 group-hover:scale-110 transition-transform duration-200" />
                  <span className="text-gray-300 font-medium">Strategy Guides</span>
                </div>
                <span className="text-white text-3xl font-bold">1</span>
                <div className="text-blue-400 text-sm mt-1">Tournament Info</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="p-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Enhanced Sidebar */}
          <div className="lg:col-span-1">
            <div className="bg-gray-900/50 backdrop-blur-xl rounded-xl p-6 border border-gray-700/50 sticky top-8">
              <h3 className="text-white font-semibold mb-4 flex items-center gap-2">
                <Scroll className="w-5 h-5 text-indigo-400" />
                Guide Topics
              </h3>
              <div className="space-y-2">
                {guideItems.map((item) => (
                  <button
                    key={item.id}
                    onClick={() => {
                      setActiveGuide(item.id);
                      setSearchQuery('');
                    }}
                    className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg transition-all duration-300 text-left group ${
                      activeGuide === item.id
                        ? 'bg-gradient-to-r from-indigo-600 to-purple-600 text-white shadow-lg'
                        : 'text-gray-400 hover:text-white hover:bg-gray-800/50'
                    }`}
                  >
                    <div className={`p-2 rounded-lg transition-all duration-300 ${
                      activeGuide === item.id 
                        ? 'bg-white/20' 
                        : `bg-gradient-to-br ${item.gradient} text-white group-hover:scale-110`
                    }`}>
                      {item.icon}
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="font-medium text-sm">{item.name}</div>
                      <div className={`text-xs mt-0.5 ${
                        activeGuide === item.id ? 'text-indigo-200' : 'text-gray-500 group-hover:text-gray-400'
                      }`}>
                        {item.description}
                      </div>
                    </div>
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-3">
            <div className="bg-gray-900/50 backdrop-blur-xl rounded-xl p-6 border border-gray-700/50 min-h-[600px]">
              {renderContent()}
            </div>
          </div>
        </div>
      </div>

      <style jsx>{`
        @keyframes float {
          0%, 100% { transform: translateY(0px) rotate(0deg); }
          50% { transform: translateY(-15px) rotate(180deg); }
        }
        .animate-float {
          animation: float 6s ease-in-out infinite;
        }
      `}</style>
    </div>
  );
};

export default GuidePage;